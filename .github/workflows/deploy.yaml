name: AWS ECR Deploy
on:
  push:
    branches:
      - lambda

permissions:
  id-token: write

jobs:
  build-ui-image:
    name: Build frontend image
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./UI

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      # https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/configuring-openid-connect-in-amazon-web-services
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ secrets.ARN_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # See  https://buildpacks.io/docs/buildpack-author-guide/publishing-with-github-actions/
      - name: Setup-tools
        uses: buildpacks/github-actions/setup-tools@v5.1.0

      - name: Setup pack
        uses: buildpacks/github-actions/setup-pack@v5.1.0

      # See more on paketo web servers https://github.com/paketo-buildpacks/web-servers
      # See for more on nginx config https://docs.vmware.com/en/VMware-Tanzu-Buildpacks/services/tanzu-buildpacks/GUID-nginx-nginx-buildpack.html
      - name: Build image
        run: |
          #!/usr/bin/env bash
          pack config default-builder paketobuildpacks/builder:base
          pack build emmanuelu17/websocket-ui --buildpack paketo-buildpacks/web-servers \
          --env "BP_WEB_SERVER=nginx" \
          --env "BP_WEB_SERVER_ROOT=dist/websocket-ui" \
          --env "BP_WEB_SERVER_ENABLE_PUSH_STATE=true" \
          --env "NODE_ENV=production" \
          --env "SERVER_DOMAIN=$SERVER_DOMAIN"
        shell: bash
        env:
          SERVER_DOMAIN: ${{ secrets.SERVER_DOMAIN }}

      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: server-sent-event
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker push --all-tags emmanuelu17/websocket-ui

  build-native-image:
    name: Build backend native image
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Set up JDK GraalVM
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: '17.0.7'
          distribution: 'graalvm'

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.ARN_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build native image
        run: mvn -Pnative spring-boot:build-image -DskipTests

      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: server-sent-event
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker image tag emmanuelu17/server-side-event:latest emmanuelu17/sse:latest
          docker push --all-tags emmanuelu17/sse